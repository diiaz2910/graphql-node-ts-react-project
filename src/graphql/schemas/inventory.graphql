type Query {
  getItems: [Items] # [Items!]! indica que es un array de objetos Items, no puede ser nulo y tampoco los objetos dentro del array
  getItem(_id: ID!): Items # _id es un argumento obligatorio
}

type Mutation {
  createItem(item: NewItemInput!): String!
}

type Items {
  _id: ID # ID debe ir en may√∫sculas
  name: String
  description: String
  image: String
  payments: [Payment]
}

input NewItemInput {
  name: String!
  description: String!
  image: String!
  payments: [String!]!
}

# Enum es un tipo de dato que se usa para definir un conjunto de constantes,
# por lo tanto el tipo name solo aceptaria los valores definidos en el enum
# enum name {
#   TV
#   CAMA
#   GUADANA
#   CORTA_CESPED
#   SABANA
#   CAMARA
#   MESA
#   SILLA
#   REPUESTO
# }
